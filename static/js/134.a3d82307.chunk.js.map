{"version":3,"file":"static/js/134.a3d82307.chunk.js","mappings":"2LACA,EAAuB,yB,SCGVA,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,eAAIC,UAAWC,EAAf,SACGJ,EAAOK,KAAI,SAAAC,GAKV,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMT,GAAhD,SACGK,EAAMK,OAASL,EAAMM,iBAFjBN,EAAME,GAMlB,KAGN,C,iHCsBD,UAzCe,WACb,OAA4CK,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAO,CACT,IAAMG,EAAkB,mCAAG,WAAMH,GAAN,mGAEAI,EAAAA,EAAAA,IAAqBJ,GAFrB,OAEjBK,EAFiB,OAGjBC,EAAkBD,EAASE,KAAKC,QACtCZ,EAAkBU,GAJK,gDAMvBG,QAAQC,MAAM,uBAAd,MANuB,yDAAH,sDASxBP,EAAmBH,EACpB,MACCJ,EAAkB,GAErB,GAAE,CAACI,IAEJ,IAAMW,EAAY,mCAAG,WAAMC,GAAN,iEACnBA,EAAEC,iBACFd,EAAgB,CAAEC,MAAOY,EAAEE,OAAOC,SAAS5B,MAAM6B,QACjDJ,EAAEE,OAAOG,QAHU,2CAAH,sDAMlB,OACE,4BACE,kBAAMC,SAAUP,EAAhB,WACE,kBAAOQ,KAAK,OAAOC,UAAQ,EAACC,KAAK,WACjC,mBAAQF,KAAK,SAAb,uBAEDxB,EAAe2B,OAAS,GACvB,SAAC,IAAD,CAAYzC,OAAQc,IAClB,OAGT,C,wMCxCY4B,EAAmB,mCAAG,6GAERC,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,GADkB,uCACqBC,EAAAA,KAHb,cAEzBrB,EAFyB,yBAKxBA,GALwB,gCAO/BI,QAAQkB,IAAI,KAAMC,SAPa,yDAAH,qDAWnBC,EAAW,mCAAG,WAAMxC,GAAN,gGAEAmC,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,GADkB,iBACDpC,EADC,oBACaqC,EAAAA,KAHb,cAEjBrB,EAFiB,yBAKhBA,GALgB,gCAOvBI,QAAQkB,IAAI,KAAMC,SAPK,yDAAH,sDAWXE,EAAgB,mCAAG,WAAMzC,GAAN,gGAELmC,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,GADkB,iBACDpC,EADC,4BACqBqC,EAAAA,KAHhB,cAEtBrB,EAFsB,yBAKrBA,GALqB,gCAO5BI,QAAQkB,IAAI,KAAMC,SAPU,yDAAH,sDAWhBG,EAAmB,mCAAG,WAAM1C,GAAN,gGAERmC,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,GADkB,iBACDpC,EADC,4BACqBqC,EAAAA,KAHb,cAEzBrB,EAFyB,yBAKxBA,GALwB,gCAO/BI,QAAQkB,IAAI,KAAMC,SAPa,yDAAH,sDAWnBxB,EAAoB,mCAAG,WAAMJ,GAAN,gGAETwB,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,GADkB,8BACYzB,EADZ,oBAC6B0B,EAAAA,KAHpB,cAE1BrB,EAF0B,yBAKzBA,GALyB,gCAOhCI,QAAQkB,IAAI,KAAMC,SAPc,yDAAH,qD,+HChD1B,IAAMH,EAAW,gCACXO,EAAU,mCACVC,EAAe,mCACfP,EAAU,kC","sources":["webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","pages/Movies.jsx","services/fetchAPI.js","utils/keyAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesList_list__0Owr9\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './MoviesList.module.css';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={css.list}>\n      {movies.map(movie => {\n        // if (!movie.title) {\n        //   console.log(movie)\n        //   return <li>not set</li>\n        // }\n        return (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title || movie.original_name }\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object),\n};\n","import { MoviesList } from 'components/MoviesList/MoviesList';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchingMovies } from 'services/fetchAPI';\n\nconst Movies = () => {\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query) {\n      const getSearchingMovies = async query => {\n        try {\n          const response = await fetchSearchingMovies(query);\n          const searchingMovies = response.data.results;\n          setSearchedMovies(searchingMovies);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      };\n      getSearchingMovies(query);\n    } else {\n      setSearchedMovies([]);\n    }\n  }, [query]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setSearchParams({ query: e.target.elements.movie.value });\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" required name=\"movie\" />\n        <button type=\"submit\">Search</button>\n      </form>\n      {searchedMovies.length > 0 ? (\n        <MoviesList movies={searchedMovies} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default Movies;\n","import { BASE_URL } from 'utils/keyAPI';\nimport { API_KEY } from 'utils/keyAPI';\nimport axios from 'axios';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/week?api_key=${API_KEY}`\n    );\n    return response;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchTMovie = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}?api_key=${API_KEY}`\n    );\n    return response;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchTMoviesCast = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    );\n    return response;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchTMoviesReviews = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    );\n    return response;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchSearchingMovies = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?query=${query}&api_key=${API_KEY}`\n    );\n    return response;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n","export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w300/';\nexport const IMG_URL_CAST = 'https://image.tmdb.org/t/p/w200/';\nexport const API_KEY = '35c371a145d1768ac8545472ed18505e';\n\n\n"],"names":["MoviesList","movies","location","useLocation","className","css","map","movie","to","id","state","from","title","original_name","useState","searchedMovies","setSearchedMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getSearchingMovies","fetchSearchingMovies","response","searchingMovies","data","results","console","error","handleSubmit","e","preventDefault","target","elements","value","reset","onSubmit","type","required","name","length","fetchTrendingMovies","axios","BASE_URL","API_KEY","log","message","fetchTMovie","fetchTMoviesCast","fetchTMoviesReviews","IMG_URL","IMG_URL_CAST"],"sourceRoot":""}